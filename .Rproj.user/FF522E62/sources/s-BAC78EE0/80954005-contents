---
title: The performance of different methods for locating variables in a data.frame (and an excuse for my first RMarkdown example)
author: elikesprogramming
date: "2014-09-02" 
thumbnailImage: "post/2014-09-07_performance_merging_files/figure-html/unnamed-chunk-7-1.png"
categories:
  - R
---

```{r setup, include=FALSE}
library(efunc)

library(ggplot2)
library(gridExtra)
library(gtable)

library(dplyr)
library(magrittr)
library(tidyr)

library(readr)
library(readxl)

library(knitr)
library(pander)

opts_chunk$set(echo = ech <- TRUE, warning = ech, message = ech, error = ech, 
               include = ech, cache.comments = FALSE, cache = FALSE)
```

First, let's create a data.frame with a few columns (variables)

```{r toy_data}
set.seed(1234567)
df <- data.frame(var1=1:1000, var2=runif(1000), var3=rnorm(1000), 
				 var4=runif(1000), var5=runif(1000), var6=rnorm(1000), 
				 var7=runif(1000))
```

Now, as far as I know, there are a number of methods in R to locate a variable in a data.frame (please let me know if I am missing one or more methods):

- Using the dollar sign (`$`) and the variable name
- Single brackets `[]` and the variable name
- Single brackets `[]` and the variable's index (position)
- Double brackets `[[]]` and the variable name
- Double brackets `[[]]` and the variable's index (position)
 
Let's compare which is the fastest method (using package microbenchmark and ggplot2 to visualize the comparison)

```{r initial_benchmark}
library(microbenchmark)
library(ggplot2)
mbm <- microbenchmark(df$var1, df[, "var1"], df[, 1], 
					  df[[1]], df[["var1"]], times = 1000)
autoplot(mbm)
```

This shows that double brackets is the fastest method to locate a variable in a data.frame (either using variable name or its position). For how much? The table shows that it's around 3 microseconds faster than the dollar sign `$`.

```{r initial_benchmark_table}
mbm
```

**I have tried this before and the dollar sign (`$`) was the fastest method to locate a variable in a data.frame, and by far. Double brackets were slighthly faster than single brackets and there was no noticeable difference between the use of  variable names and index position. I originally ran this code in a MacBook Air running R version 3.0.2 (Frisbee Sailing). Then I did it again in my main machine (DELL XPS, i7-2630QM, 8GB in RAM, running Windows 7 64bits and R version 3.1.1) and the results were different (fastest method is double brackets, then dollar sign and finally single brackets). I guess all the differences (hardware, OS, R version) may have something to do with the results. Maybe later (some day) I will investigate further. Now, after I updated R in my MacBook Air, the results are similar to those presented here. Unfortunately, when I first did this, I didn't care about reproducibility and forgot to record `sessionInfo()` or the version of the packages I was using. Lesson learnt, ..., you can find such information at the end of this post**

Now, let's examine if there is any difference in the performance as we extract different variables from the data.frame (perhaps the order of the variables matter?)

```{r vars_benchmark}
mbm <- microbenchmark(df$var1, df[, "var1"], df[, 1], 
					  df[[1]], df[["var1"]], 
					  df$var2, df[, "var2"], df[, 2], 
					  df[[2]], df[["var2"]], 
					  df$var5, df[, "var5"], df[, 5], 
					  df[[5]], df[["var5"]], 
					  df$var7, df[, "var7"], df[, 7], 
					  df[[7]], df[["var7"]],
					  times = 1000)
autoplot(mbm)
```

At least with these few variables, the position of the variable does not matter.

But maybe the number of variables in the data.frame matter, so let's see how the results change for data frames with many variables. First, generate five data frames with 7, 20, 70, 700 and 7000 variables respectively. Then, assess the performance of the different methods to extract variables in each data.frame.

```{r obs_benchmark}
df1 <- data.frame(replicate(n = 7, expr = runif(1000)))
df2 <- data.frame(replicate(n = 20, expr = runif(1000)))
df3 <- data.frame(replicate(n = 70, expr = runif(1000)))
df4 <- data.frame(replicate(n = 700, expr = runif(1000)))
df5 <- data.frame(replicate(n = 7000, expr = runif(1000)))

mbm <- microbenchmark(df1$X3, df1[, "X3"], df1[, 3], 
					  df1[[3]], df1[["X3"]], times = 1000)
autoplot(mbm)
mbm <- microbenchmark(df2$X3, df2[, "X3"], df2[, 3], 
					  df2[[3]], df2[["X3"]], times = 1000)
autoplot(mbm)
mbm <- microbenchmark(df3$X3, df3[, "X3"], df3[, 3], 
					  df3[[3]], df3[["X3"]], times = 1000)
autoplot(mbm)
mbm <- microbenchmark(df4$X3, df4[, "X3"], df4[, 3], 
					  df4[[3]], df4[["X3"]], times = 1000)
autoplot(mbm)
mbm <- microbenchmark(df5$X3, df5[, "X3"], df5[, 3], 
					  df5[[3]], df5[["X3"]], times = 1000)
autoplot(mbm)
```

Main results do not change: doble brackets are always the fastest method, then the dollar sign and finally the single brackets. However, for very big data.frames (many variables) there seems to be a difference between locating the variable by name vs by index (faster the latter, particularly using single brackets).

In conclusion, if you have many iterations where you have to extract a single variable from a data.frame you should use the doble brackets instead of single brackets (if you can, though). Dollar sign is always faster than single brackets, so this is also an alternative (but notice that, to use the `$` method you have to know the variable name at the coding time, so you cannot use it in cases where the variable that you need to extract changes dynamically; or at least I am not aware of this possibility).

Finally, here's the `sessionInfo()`:

```{r reproducibility}
sessionInfo()
```

